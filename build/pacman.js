// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Pacman = (function() {
    Pacman.MASS = 10;

    Pacman.COLOR = 0xFFEE00;

    Pacman.RADIUS = 3;

    Pacman.VELOCITY = 20;

    function Pacman(game) {
      this.collision = bind(this.collision, this);
      this.game = game;
      this.geometry = new THREE.SphereGeometry(Pacman.RADIUS);
      this.material = new THREE.MeshBasicMaterial({
        color: Pacman.COLOR
      });
      this.object = new Physijs.SphereMesh(this.geometry, this.material, Pacman.MASS);
      this.object.position.set(0, -10, 7.5);
      this.object.name = 'Pacman';
      this.game.addToScene(this.object);
      this.edge = new Edge(this.object, this.game);
      this.object.addEventListener('collision', this.collision);
    }

    Pacman.prototype.xforce = function(direction) {
      return this.object.setLinearVelocity(new THREE.Vector3(Pacman.VELOCITY * direction, 0, 0));
    };

    Pacman.prototype.yforce = function(direction) {
      return this.object.setLinearVelocity(new THREE.Vector3(0, Pacman.VELOCITY * direction, 0));
    };

    Pacman.prototype.getPosition = function() {
      return this.object.position;
    };

    Pacman.prototype.getDirection = function() {
      var velocity, x, y;
      velocity = this.object._physijs.linearVelocity;
      x = Math.abs(velocity.x);
      y = Math.abs(velocity.y);
      if (x > y) {
        return new THREE.Vector3(Math.sign(velocity.x), 0, 0);
      } else {
        return new THREE.Vector3(Math.sign(velocity.y), 0, 0);
      }
    };

    Pacman.prototype.collision = function(other) {
      if (other.name === 'Ghost') {
        this.game.removeFromScene(this.object);
        document.getElementById('over').innerHTML = 'GAME OVER';
        return document.getElementById('over').style.display = 'block';
      }
    };

    return Pacman;

  })();

}).call(this);
